import { Question, RawQuestion } from "./interfaces";
import { CategoryNamesStrict, CategoryNameVersions, CategoryNamesPretty, QuestionDifficulties, QuestionTypes, QuestionEncodings, QuestionVersions, CategoryType } from "./enums";
import { QuestionOptions } from "./interfaces";
import Category from "../Classes/Category";
export declare type CategoryIdResolvable = NumberResolvable;
export declare type CategoryNameResolvable = CategoryName<"Pretty" | "Strict"> | string;
export declare type CategoryName<T extends CategoryNameVersion = "Strict"> = T extends "Pretty" ? CategoryNamePretty : CategoryNameStrict;
export declare type CategoryNameVersion = keyof typeof CategoryNameVersions;
export declare type CategoryNamePretty = keyof typeof CategoryNamesPretty;
export declare type CategoryNameStrict = keyof typeof CategoryNamesStrict;
export declare type CategoryResolvableType = CategoryType;
export declare type CategoryResolvable = CategoryNameResolvable | CategoryIdResolvable | Category;
export declare type NumberResolvable = `${number}` | number;
export declare type OpenTDBResponseCode = 0 | 1 | 2 | 3 | 4;
export declare type Questions<T extends QuestionVersion = "Final"> = T extends "Raw" ? RawQuestion : Question;
export declare type QuestionDifficulty = keyof typeof QuestionDifficulties;
export declare type QuestionOptionsDefaults = Pick<QuestionOptions, "amount" | "encode">;
export declare type QuestionType = keyof typeof QuestionTypes;
export declare type QuestionEncoding = keyof typeof QuestionEncodings;
export declare type QuestionVersion = keyof typeof QuestionVersions;
